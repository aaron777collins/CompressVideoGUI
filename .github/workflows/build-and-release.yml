name: Build & Release desktop binaries

on:
  workflow_dispatch:            # manual button in the Actions tab
  push:
    tags: ['v*.*.*']            # e.g. v1.2.3 will trigger a release

permissions:
  contents: write               # needed by release job

jobs:
  # ---------------------------------------------------------------- Build  —
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Apt libs (Linux only)
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install -y libxcb-xinerama0 ffmpeg

    - name: Fetch static ffmpeg
      run: python .github/workflows/get_ffmpeg.py "${{ runner.os }}"

    - name: Install Python deps
      run: |
        python -m pip install -U pip
        pip install -r requirements.txt

    - name: Build single‑file exe/app
      run: pyinstaller --noconfirm compress_video_gui_onefile.spec

    # Rename outputs so they have unique names across the matrix
    - name: Rename artifact
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          mv dist/CompressVideo.exe dist/CompressVideo-win.exe
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          # Zip the .app bundle
          ditto -c -k --sequesterRsrc --keepParent dist/CompressVideo.app \
                dist/CompressVideo-mac.zip
          rm -rf dist/CompressVideo.app
        else
          mv dist/CompressVideo dist/CompressVideo-linux
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ runner.os }}
        path: dist/*                  # one file per OS

  # ------------------------------------------------------------- Release  —
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: binaries-*           # grabs ALL three OS artefacts
        path: release-assets

    - name: Display downloaded files
      run: ls -R release-assets

    - name: Create or update GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: CompressVideo ${{ github.ref_name }}
        draft: false
        prerelease: false
        body: |
          Automated build from commit `${{ github.sha }}`

    - name: Upload binaries to Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        files: |
          release-assets/**/CompressVideo-win.exe
          release-assets/**/CompressVideo-mac.zip
          release-assets/**/CompressVideo-linux
